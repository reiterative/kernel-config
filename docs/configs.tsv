Kernel configuration subsytem:attributes	Kernel configurations	Key Configuration Dependencies : notes 	Architecture Dependencies	Safety Default Setting	Description	Related CVEs	Related ExploitDB Scripts	Weaknesses/ Limitations	Supported Kernel Versions	General Guidelines	Performance Impact	Suggested for Instance Types	Kernel doc references
This column indicates the context for each kernel configuration (see column H), indicating the relevant Linux kernel subsystem(s) and potential vulnerabilty which is addressed by the configuration setting.	Kernel configurations are features which may be enabled or disabled in the kernel build.  The features listed below are chosen as candidates to support safety goals in safety critical systems.  The integrator may consider these features in a specific use case and judage (based on documentation and source code) whether or not each of these features is relevant to support the safety of the system under consideration.	Dependencies change from version to version, and it is the developers' responsibility to check. 	Architecture dependencies can be derived by using http://get_feat.pl/   For example, to list features supported by arm64 architecture, run:  get_feat.pl --arch=arm64.  Or to list features supported by all architectures in REST format, run:  get_feat.pl rest.  Or to list features supported by currently running kernel, run: get_feat.pl current.	Each setting can either be enabled (set to "Y") or disabled ("N").  This column indicates the desired setting for safety features to be supported.	Basic description of each kernel configuration is documented in the Kernel Driver Database  https://cateee.net/lkddb/web-lkddb/  which is built automatically from kernel sources.  Here we provide additional clarifications to help a system integrator understand how each kernel configuration may be relevant to support safety requirments in a specific use case.	The CVEs related to this configuration.	The links to well-known and verified scripts for exploit the kernel when this configuration is not enabled.	Weaknerses and limitations for each kernel feature are addressed, to help the integrator in considering the broader context of its adtoption.	See Linux Kernel Driver Database https://cateee.net/lkddb/web-lkddb/ for each kernel configuration for the most up-to-date information on supported kernel versions for each kernel configuration.	The scope of this documentation is to identify kernel configurations which support features that are potentially useful to enhance safety in specific use cases.  The document should help the integrator focus on a relevant subset of the thousands of available kernel configurations.   It should be clear that this document is not a "plug and play" list, and it is up to the integrator to use the content as a baseline to help focus the search for relevant kernel configurations.	Performance impact on boot time and runtime. Performance of boot might affect the live migration and fail over and recovery time. 	Suggestions on configure it on host and/or guest OS, with considerations of performance and isolation brought by VMs. 	Links to useful kernel documentation which may be helpful for the integrator in evaluating the relevance of any kernel configuration for a specific use case.
Memory management subsystem, Heap Memory: Use after free	CONFIG_SLAB_FREELIST_RANDOM	CONFIG_SLAB || CONFIG_SLUB	Requires architecture support for SLUB (unqueued) or SLAB memory allocator.	Y	Randomize kernel data structures to help make common kernel exploits more difficult.    Linux freelist is a data structure (FIFO queue) which organizes free heap memory.   During heap overflow attacks, the attacker cannot predict the heap state since the heap may be fragmented into multiple memory areas.  In order to exploit a heap overflow, the attacker will need to control the heap state.  This can be done by repeated allocations of the same size, and leveraging the predictability of the freelist management algorithm to follow future allocations.  For an example, see Job Oberheide's blog. To help minimize the risk of heap overflow attack, this configuration setting supports freelist randomization. 			The randomization algorithm is carefully chosen to balance sufficient randomization so that the basic heap overflow attack is more difficult, but at the same time avoiding performance impact due to increased time for memory searches in randomized memory. Therefore there are no guarantess that heap overflow attacks will be completely blocked. However, enabling this configuration setting (with negligible performance impact expected) should reduce the risk of heap overflow attacks.	4.7–4.20, 5.0–5.17	The integrator in a particular system should confirm: 1. Performance impact matches expectations and is negligible. 2. The risk of heap overflow attacks is reduced to an acceptable level.	A little bit, could be negligible.		https://kernel.org/doc/Documentation/admin-guide/hw-vuln/spectre.rst
Memory management subsystem, Heap Memory: Use after free	CONFIG_SLAB_FREELIST_HARDENED	CONFIG_SLAB || CONFIG_SLUB	Requires architecture support for SLUB (unqueued) or SLAB memory allocator.	Y	This option added XOR operations on SLAB freelist pointers for additional protection. This feature makes the system much less vulnerable to freelist pointer exploits (or heap memory management issues due to freelist pointer overwrites) because an attacker needs to expose both the random value and the location of the freelist pointer.   Continuous enhancements to more recent kernel versions help to make this feature much more capable of protecting heap memory from overflow exploits.			It should be noted that some slab implementations have more sanity-checking than others.	4.14–4.20, 5.0–5.17	The integrator in a particular system should confirm: 1. Performance impact matches expectations and is neglible. 2. The risk of heap overflow attacks (or errors due to heap overflow overwirtes) is reduced to an acceptable level. 3. The slab implementation on the specific architecture has undergone sufficient sanity testing for safety critical applications. If not, additional testing may be mandated for safety qualification.	No		https://outflux.net/blog/archives/category/security/
Memory management subsystem, Heap Memory: Use after free	CONFIG_SLAB_MERGE_DEFAULT	CONFIG_SLAB || CONFIG_SLUB		N	Disabling this option will prevent slab caches from being merged by the kernel when they share similar charactersitics.  This makes heap overflow exploits much more difficult, since such an exploit will usually only be able to overwrite objects in the same cache.			Enabling this setting reduces kernel fragmentation, so that the integrator should check the impact on memory allocation due to disabling 	4.13–4.20, 5.0–5.17	Recommendation from Kees Cook  https://www.openwall.com/lists/kernel-hardening/2017/06/19/33  			link
Memory management subsystem, Heap Memory: Use after free	CONFIG_SHUFFLE_PAGE_ALLOCATOR	SLAB_FREELIST_RANDOM, ACPI_NUMA		Y	SLAB_FREELIST_RANDOM (see line 22 above) is limited to reducing predictability of the freelist data strucutre, and this configuration extends the randomization to the page allocator free memory ists.  Thus these 2 configurations complement each other and are recommended in tandem.			Page allocator randomization can help to improve cache utilization, but may have a negative performance impact in systems which do not support cache. Therefore by default it will be enabled only after the runtime system detects a direct-mapped mememory side cache. In any case, the randomization may be enabled by explicit setting, in order to reduce the predictability of the page allocator data structures.	5.2–5.17	When enabling the feature, the integrator should confirm: 1. Availibility of direct-mapped memory side cache, in which case the performance vs randomization benefit is expected to be accceptable. 2. In any case, performance impact as well as reduced risk of heap exploitation shall be confirmed in the specific system.			https://lore.kernel.org/patchwork/patch/1037734/
Memory management subsystem, Heap Memory, Debug subsystem: Use after free	CONFIG_SLUB_DEBUG	SLUB, SYSFS	Requires architecture support for expert kernel configuration features (CONFIG_EXPERT) as well as SLUB (Unqueued) memory allocator.	Y	Enable user space allocator validation checking in production image or during development.   Turns on SLUB allocator debugging tracking and exposes information via procfs to help when investigating kernel memory allocation problems.  Slub_debug may be configured to expose only certain information and to improve performance. 			Slub_debug may be configured to expose only certain information and to improve performance.	2.6.22–2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.17	Full SLUB_DEBUG support has most performance impact from all hardening features.  In a production system minimal debugging (only sanity checks) may be enabled by booting with slub_debug=F.. On the other hand, for testing/development purposes, more extensive features may be enabled, including CONFIG_SLABINFO; see https://linux.die.net/man/5/slabinfo 			See https://lwn.net/Articles/229984/ for some details on SLUB vs SLAB memory allocation.  Also  https://kernel.org/doc/Documentation/admin-guide/hw-vuln/spectre.rst for clarifications of Spectre attacks
Memory management subsystem, Heap Memory, Debug subsystem: Use after free	CONFIG_INIT_ON_FREE_DEFAULT_ON	None		Y	Same affect as setting "init_on_free=1" on kernel command line.  This is a more recent enhancement to the kernel, enforcing all page allocator and slab allocator memory to be zeroed when freed.  This helps to avoid many issues related to uninialized heap memory, such as information leakage from heap memory.				5.3-5.17	Expected performance impact 3-5%, and is more expensive than init_on_alloc (see below).			link
Memory management subsystem, Heap Memory, Debug subsystem: Use after free	CONFIG_INIT_ON_ALLOC_DEFAULT_ON	None		Y	Same affect as setting "init_on_alloc=1" on kernel command line.  This is a more recent enhancement to the kernel, enforcing all page allocator and slab allocator memory to be zeroed when allocated.  This helps to avoid many issues related to uninialized heap memory, such as information leakage from heap memory.				5.3-5.17	Expected performance impact < 1% (but is dependent on workload and needs to be tested per use case).			link
Kernel Memory reference count: Use after free	CONFIG_REFCOUNT_FULL	None		Y	Reduce Linux kernel vulernability to specific memory safety errors: related to reference counters (ensure that counters are guaranteed never to overflow).     refcount_t type and corresponding API were introduced to analyze instances of reference counters using 3 Coccinelle patterns: 1. Freeing a referenced object based on the return value from atomic_dec_and_test or one of its variants.  This is the most typical reference counter use case. 2. Using atomic_add_return to decrement a variable and compare its updated value, typically against zero.   3. Using atomic_add_unless to decrememnt a counter only when its value differs from one.   Checks are perfromed to prevent potential memory leaks (object released when reference counter reaches zero), as well as potential use after free.	CVE-2016-0728		Enable user space allocator validation checking in production image or during development.   Turns on SLUB allocator debugging tracking and exposes information via procfs to help when investigating kernel memory allocation problems.   Note that this setting is no longer supported in recent kernel versions, and should be replaced by manual testing of relevant subsystems.  Relevant code to support CONFIG_REFCOUNT_FULL may be found in kernel versions which support this feature and the code may be used as a basis to manually set specific settings in a particular use case.	4.13–4.20, 5.0–5.4	Potential performance impact, selelctively set on necessary subsytems in production.  Complexity benefit to be weighed against safety benefit (use after free). This features switches to a fully state checked implementation for refcounting infrastructure, and has a performance impact which is acceptable only for development purposes.  Based on the output and analysis during development,  this setting should be disabled during production and APIs run on specific relevant kernel subsutstem.  	When enabled, refcount_inc() is replaced by refcount_inc_not_zero_checked(), which checks two conditions: 1) if full then remained topped (i.e., UINT_MAX) and continue to use the object (i.e., leak), and 2) if freed then do not use the object. Similarly refcount_sub_and_test_checked() checks a underflow condition.		https://arxiv.org/pdf/1710.06175.pdf
GCC, plugins, Stack memory: Uninitialized variables: 	CONFIG_GCC_PLUGIN_STRUCTKLEAK	None	Requires architecture and compiler support for STRUCTLEAK variable initializations.	Y	Zero initialize stack variables/structures on stack Linux kernel is built by default with warnings enabled to detect uniinitialized stack variables.  However, the warning is disabled for variables which are passed by reference to another function, based on the assumption that the called function will initialize the variable.  This CONFIG is provided as a GCC plugin which initializes any such variable to zero.			For performance optimization, the level of coverage provided by this CONFIG may be defined (see CONFIG_GCC_PLUGIN_STRUCTLEAK_BYREF_ALL below).	4.11–4.20 and 5.0, 5.1–5.17	In earlier kernel versions (4.11-4.20, 5.0), this CONFIG initialized to zero any variable identified as a user-space pointer (containing a __user attribute).			link
GCC, plugins, Stack memory: Uninitialized variables: 	CONFIG_GCC_PLUGIN_STRUCTLEAK_ BYREF_ALL	GCC_PLUGINS, !CC_HAS_AUTO_VAR_INIT_ZERO, !(KASAN && KASAN_STACK) 	Requires architecture and compiler support for STRUCTLEAK variable initializations.	Y	Zero initialize stack variables/structures passed by reference on stack This CONFIG is provided as a GCC plugin which initializes to zero any stack variables that may be passed by reference and have not already been explicitly initialized. This feature is intended to eliminate all vulnerabilities due to uninitialized stack variables.			Runtime performance  impact should be measured for any specific use case.	4.14–4.20, 5.0–5.17	In earlier kernel versions (4.11-4.20, 5.0), this configuration initialized to zero all struct type variables which were passed by reference.			link
Stack memory: Uninitialized variables:	CONFIG_INIT_STACK_ALL	CC_HAS_AUTO_VAR_INIT		Y	Initializes all stack variables on function entry to OxAA (for GCC see previous configuration setting)			Dependency on CONFIG_CC_HAS_AUTO_VAR_INIT	5.2-5.8	-ftrivial-auto-var-init in Clang builds.  For GCC builds it is same as CONFIG_GCC_PLUGIN_STRUCTLEAK_BYREF_ALL			https://patchwork.kernel.org/project/linux-kbuild/patch/20190408170418.148554-2-glider@google.com/
Kernel Memory: Isolation of critical code	CONFIG_BPF_JIT_ALWAYS_ON	BPF_SYSCALL, HAVE_EBPF_JIT, BPF_JIT	Requires architecture support for BPF Just-InTime (JIT) compiler.	Y	Enables BPF JIT and removes BPF interpreter to avoid speculative execution of BPF instructions by the interpreter.  This setting was introduced to help mitigate the risk of Spectre2 attack, in which the bpf interpreter was used to leak information via cache side channel and let VM read hypervisor memory.			This kernel configuration should be used with appropriate settings of BPF capabilieies (CAP_BPF) based on the specific use case. See  https://lwn.net/Articles/820560/ 	4.15–4.20, 5.0–5.17	eBPF is a powerful VM supporting execution of user space code inside the Linux kernel, thus avoiding direct kernel programming which is not safe. It is commonly used for system profiling and network packet filtering (hence the original name, BPF=Berkley Packet Filter), and is a basic tool used for security profiling. See https://lwn.net/Articles/740157/ for a brief overview.			https://www.spinics.net/lists/netdev/msg484920.html  https://en.wikipedia.org/wiki/Speculative_execution#:~:text=Speculative%20execution%20is%20an%20optimization,known%20that%20it%20is%20needed   for further details on Spectre- type attacks
Kernel Memory: Isolation of critical code	CONFIG_BPF_UNPRIV_DEFAULT_OFF	CONFIG_BPF_SYSCALL		Y	Disables the ability to run unprivileged BPF.  Unprivileged BPF could be used to exploit certain potential speculative execution side-channel vulnerabilities on unmitigated affected hardware.			See above	5.13-5.17	See above			A recent example of how unprivileged BPF may be abused, see  https://lwn.net/Articles/887326/
Stack memory: Stack overflow:	CONFIG_STACKPROTECTOR	HAVE_STACKPROTECTOR	Requires architecture support for STACKPROTECTOR and gcc compiler option -fstack-protector 	Y	Turns on stack protection feature in gcc compiler.  A special value ("canary") is stored between the regular stack variables and the function return address.  In case of a stack overflow, instead of overwriting the function return address - the canary will be overwritten.  On function return, the canary value will be checked, and if it has been changed - the function will terminate with a kernel panic (stack overflow).			Requires gcc v4.2 or above. To minimize performance impact, any functions which has an 8-byte or larger character array on the stack will have the stack-protector logic enabled.	4.18–4.20, 5.0–5.17	Potential performance impact.  On an x86 defconfig build, this feature will add canary checks to only ~3% of all kernel functions, increasing kernel code size by ~0.3%.	Increasing kernel code size by ~0.3%.	Host and Guest OS	link
Stack memory: Stack overflow:	CONFIG_STACKPROTECTOR_STRONG	STACKPROTECTOR	Requires architecture support and gcc compiler option -fstack-protector-strong	Y	 Turns on strong stack protection feature in gcc compiler.  In addition to stack protection supported by the basic CONFIG_STACKPROTECTOR, the canary logic will be added in any of the following conditions: 1. A local variables' address is used as prt of the right hand side of an assignment or function argument. 2. A local variable is an array, or a union containing an array (regardless of array type or length). 3. Function uses register local variables.			Requires gcc v4.9 or above	4.18–4.20, 5.0–5.17	Potential performance impact (most specifically for "strong" option.  Performance impact:  On an x86 defconfig build, this feature will add canary checks to ~20% of all kernel functions, which increases the kernel code size by ~2%.	STACKPROTECTOR_STRONG inserts a canary to ~20% of functions in the kernel.		link
Stack memory: Stack overflow:	CONFIG_FORTIFY_SOURCE	ARCH_HAS_FORTIFY_SOURCE	Requires relevant compiler option to be set and architecture support for FORTIFY_SOURCE.  For example, in gcc, if fortify_source is set to 1 with compiler optimization level set to 1, the compiler will only perform checks which shoiuld not change the beahvior of conforming programs.  If fortify_source is set to 2, additional checking is added, but some conforming programs may fail.	Y	Detects buffer overflows in common string and memory functions			Compiler dependency, since the feature is supported only wgere the compiler can determine and validate the buffer sizes.  For example, supported by gcc v4.0 or above.	4.13–4.20, 5.0–5.17	Potential performance impact, compiler support level most commonly can be set.    Setting the fortify_source level should consider both performance impact of the additional checks, impact of false positivies, as well as necessary security/safety level for the specific use case.			link
Stack memory: Stack overflow:	CONFIG_SCHED_STACK_END_CHECK	DEBUG_KERNEL	Depends on DEBUG_KERNEL	Y	Checks for stack overrun on calls to schedule().  Kernel panic in case the stack overflow area is overwritten.			Security implications of debug kernel for usage in production systems needs to be evaluated for each specific use case.	3.18–3.19, 4.0–4.20, 5.0–5.17	Minimal expected performance impact			link
Stack memory: Stack overflow:	CONFIG_VMAP_STACK	HAVE_ARCH_VMAP_STACK, !KASAN || KASAN_VMALLOC	Not supported on MIPS platforms.  Depends on architecture support for KASAN.	Y	Detects kernel stack overflows to be caught immediately rather than causing corruption which then needs to be diagnosed.  Enables virtually mapped kernel stacks with guard pages, by default, vmap_area includes one more page as a guard.	CVE-2016-10153, CVE-2017-8068, CVE-2017-8070		To use this with KASAN, the architecture must support backing virtual mappings with real shadow memory, and KASAN_VMALLOC must be enabled.	4.9–4.20, 5.0–5.17	Minimal expected performance impact, due to minimal use of VLAs (Very Large Arrays) in the kernel (avoided completely since kernel v4.20), the performance is affected by number of cache entries.			https://kernel.org/doc/Documentation/dev-tools/kasan.rst
Stack memory: Stack overflow:	CONFIG_THREAD_INFO_IN_TASK	None	Requires architecture support to move all thread_info fields except flags and stack pointer, and to fix various runtime bugs.	Y	Move thread information off the stack and into the task struct.  This is most effective for safety of task info, particularly during context switch.			Together with VMAP_STACK and CONFIG_GCC_PLUGIN_STACKLEAK, these configurations help to protect kernel stack memory from most kernel stack depth overflow issues.	4.9-4.20, 5.0-5.17	x86 implementation actually improved performance due to code cleanup, but not implemented in most architectures.  No expected performance impact unless there are archtecture-specific issues involved.			link
Stack memory: Stack overflow:	CONFIG_GCC_PLUGIN_STACKLEAK	GCC_PLUGINS, HAVE_ARCH_STACKLEAK	Depends on support for gcc plugins (gcc v4.5.0 or later), and archtiecture support for stackleak (to fill stack with poisong value before returning from system calls).	Y	Makes the kernel erase the kernel stack before returning from system calls, leaving the stack initialized to the poison value.			Recent patch to be applied, relevant only for gcc v4.8 or higher and on x86/i386/arm64 architectures. 	4.20, 5.0-5.17	Performance impact, 1% slowdown on a single CPU system.  Should check your implementation before deployment.  Performance impact depends on depth of stack usage, rather than function calling complexity.			See https://lwn.net/Articles/822240/
Stack memory: Stack overflow:	CONFIG_PAGE_POISONING	PAGE_POISONING_NO_SANITY, HIBERNATION		Y	Fill pages with the poson pattern after free, verify the pattern before allocation.  Dependent on "page_poison=1" in kernel command line.  				4.6-4.20, 5.0-5.17	Performance impact.  To minimize, use init_on_free=1 command line option instead, whcih will sanitize only freed pages (and won't check on allocation).			link
Stack memory: Stack overflow:	CONFIG_PAGE_POISONING_NO_SANITY	PAGE_POISONING		N	If set to Y will skip the sanity checking on allocation and only fill the pages with poison on free.				4.6-4.20, 5.0-5.10	If enabled will reduce performance impact.			link
Heap memory: Heap overflow:	CONFIG_DEBUG_LIST	CONFIG_DEBUG_KERNEL, CONFIG_BUG_ON_DATA_CORRUPTION	Depends on DEBUG_KERNEL.  Depends on BUG_ON_DATA_ CORRUPTION (see below)	Y	Extended checks in linked list walking routines			Security implications of debug kernel for usage in production systems needs to be evaluated for each specific use case.	2.6.19–2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.16, 5.17-rc+HEAD 	Although not expected to be major, integrator should confirm performance impact in the specific use case.			https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-10661
Driver: Heap overflow:	CONFIG_DEBUG_SG	DEBUG_KERNEL		Y	Enable this to turn on checks on scatter-gather tables. This can help find problems with drivers that do not properly initialize their sg tables.  Used to support DMA (direct memory access)				2.6.24–2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.17	Although not expected to be major, integrator should confirm performance impact in the specific use case.  Presumably most relevant for development only.			https://www.kernel.org/doc/Documentation/DMA-API-HOWTO.txt
Kernel Memory: Kernel corruption of user space memory	CONFIG_BUG_ON_DATA_CORRUPTION	DEBUG_LIST	Depends on DEBUG_KERNEL	Y	Bug on kernel data structures when checked for validity			Security implications of debug kernel for usage in production systems needs to be evaluated for each specific use case.	4.10–4.20, 5.0–5.17	Performance impact, not relevant as currently implemented for linked lists (see CONFIG_DEBUG_LIST).			link
Kernel Memory: Kernel corruption of user space memory	CONFIG_DEVKMEM	!ARM64	Not supported by ARM64	N	Disable direct kernel memory access			/dev/kmem should only be used for kernel debugging, and normally should not be enabled for production systems.	2.6.26–2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.12	Improved performance			link
Kernel Memory: Kernel corruption of user space memory	CONFIG_DEVMEM	None	If you must enable DEVMEM, at lesat enable strict mode: CONFIG_STRICT_DEVMEM, CONFIG_IO_STRICT_DEVMEM	N	Disable direct physical memory access			Safety mechanisms which rely on direct physical memory access to check hardware integrity will not allow DEVMEM to be disabled.  	4.0–4.20, 5.0–5.17	Safety mechanisms which rely on /dev/mem can and should be rewritten to avoid direct physical memory access, and to use standard Linux drivers and fault handling.			link
Kernel Memory: Kernel corruption of user space memory	CONFIG_DEVPORT	ISA || PCI	To enable would require support of ISA-bus hardware as well as PCI	N	Disable direct physical memory access to IO ports via /dev/port device			Safety mechanisms which rely on direct physical memory access to IO ports to check hardware integrity will not allow DEVPORT to be disabled.  	2.6.22–2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.17	Safety mechanisms which rely on /dev/port can and should be rewritten to avoid direct physical memory access, and to use standard Linux drivers and fault handling.			link
Kernel Memory: Kernel corruption of user space memory	CONFIG_ACPI_CUSTOM_METHOD	DEBUG_FS		N	Disable debug feature which allows ACPI methods to be inserted or replaced without rebooting the system.  If enabled, this feature would allow direct physical memory writing.			For details on how this may be (ab)used, see  https://mjmwired.net/kernel/Documentation/firmware-guide/acpi/method-customizing.rst	3.0-3.19, 4.0-4.20, 5.0-5.17	No anticipated runtime impact, debug feature which should not be used in production software.			http://devdoc.net/linux/LinuxKernel-docs-5.3rc4/firmware-guide/acpi/index.html
Kernel Memory: Kernel corruption of user space memory	CONFIG_LEGACY_PTYS	None		N	Disable legacy PTY (pseudoterminal) interface, which had numerous security issues.  Use more modern PTY interface, see  https://cateee.net/lkddb/web-lkddb/UNIX98_PTYS.html				2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.16	Negligible anticipated performance impact, UNIX98 PTY support is well established and should be used.			link
Kernel Memory: Kernel corruption of user space memory	CONFIG_HIBERNATION   https://cateee.net/lkddb/web-lkddb/HIBERNATION.html ,   	SWAP, ARCH_HIBERNATION_POSSIBLE, HIBERNATE_CALLBACKS || LZO_COMPRESS || LZO_DECOMPRESS ||CRC32	Hibernation - see CONFIG_HIBERNATION  https://cateee.net/lkddb/web-lkddb/HIBERNATION.html :  Depends on architecture support for HIBERNATION as well as memory swap,both of which are commonly found. 	N	Block replacement of running kernel or enable switch to safe state			User space tools to support suspend to disk:  http://suspend.sf.net. 	2.6.23–2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.17	Hibernation:  If supported, user space tools as well as bootloader configuration can be used to enable suspend to disk functionality. 			link
Kernel Memory: Kernel corruption of user space memory	CONFIG_KEXEC    https://cateee.net/lkddb/web-lkddb/KEXEC.html 	!SMP || PM_SLEEP_SMP,  MMU, KEXEC_CORE	Kexec, see CONFIG_EXEC  https://cateee.net/lkddb/web-lkddb/EXEC.html:  system reboot on kernel level (swtich down current kernel and switch to another kernel image).  Depends on hardware MMU (memory management unit) support, which is commonly found.	Y	Block replacement of running kernel or enable switch to safe state			User space tools to support suspend to disk:  http://suspend.sf.net. 	2.6.16–2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.17	kexec:  Needs to be aligned with use case requirements for system behavior.  An alternative option is to define an alternative kernel image as the system "safe state", in which case kexec can and should be enabled.			link
Kernel Memory: Kernel corruption of user space memory	CONFIG_HARDENED_USERCOPY	HAVE_HARDENED_USERCOPY_ALLOCATOR	Not supported on MIPS platforms	Y	Harden memory copies between kernel and user-space.  Rejects memory ranges which are obviously wrong, for example - larger than specified heap object, span multiple separately allocated pages, not on process stack, or are part of the kerenl source text.				4.8–4.20, 5.0–5.17	Kills entire classes of heap overflow exploits and similar kernel memory vulnerabilities.			link
Kernel Memory: Kernel corruption of user space memory	CONFIG_HARDENED_USERCOPY_FALLBACK	HARDENED_USERCOPY	Not supported on MIPS platforms	N	Disable fallback to gain full whitelist enforcement.  Missing usercopy whitelists can be identified via a warning message to the kernel log (instead of rejecting the copy). Currently a temporary configuration setting which should be removed once all usercopy whitelists have been identified and fixed.			Usercopy whitelisting is based on a PAX security feature to minimize the scope of memory allocations which can be copied to and from userspace.	4.16–4.20, 5.0–5.15	Enhancements to whitelisting in more recent kernel versions			link
Kernel Memory: Kernel corruption of user space memory	CONFIG_HARDENED_USERCOPY_PAGESPAN	HARDENED_USERCOPY, HAVE_HARDENED_USERCOPY_ALLOCATOR, STRICT_DEVMEM, MMU, DEVMEM, ARCH_HAS_DEVMEM_IS_ALLOWED, EXPERT, DEBUG_KERNEL	Not supported on MIPS platforms, default on for PPC, X86 and ARM64	N	Disable fallback to gain full whitelist enforcement.  Avoid rejecting existing instances of multi-page allocation which are not currently whitelisted and should not be rejected. Currently a temporary configuration setting which should be removed once all usercopy whitelists have been identified and fixed.			Usercopy whitelisting is based on a PAX security feature to minimize the scope of memory allocations which can be copied to and from userspace.	4.8–4.20, 5.0–5.17	Enhancements to whitelisting in more recent kernel versions			link
Kernel Memory: Kernel corruption of user space memory	SECURITY_DMESG_RESTRICT	None		Y	DMESG_RESTRICT prevents unprivileged users from viewing those messages using dmesg command. When DMESG_RESTRICT is enabled, only users with system administration privileges are allowed to see the messages. When DMESG_RESTRICT is not enabled, every user can see the messages.	CVE-2018-17182							link
Heap memory:  R/W access to memory allocated to another software element:	CONFIG_COMPAT_BRK	None	May break some old binaries, but for most newly developed systems (since 20000, this should be safe.	N	Enable heap randomization (note that this feature set to "Y" will actually disable heap randomization).			Dependency on kernel.randomize_va_space kernel setting, which should be set to 2	2.6.25–2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.17	Major performance impact is not expected, but needs to be evaulated in the specific use case.			link
Heap memory:  R/W access to memory allocated to another software element:	CONFIG_USERFAULTFD	MMU	Depends on hardware architecture support for MMU (memory management unit) which is commonly found.	N	Disable (by setting to "N") the userfaultfd() system call which allows the user to Intercept and handle page faults in user space			Such code should be moved to kernel space	4.3–4.20, 5.0–5.17	Fault handling whihc relies on userfaultfd() should be moved to drivers			link
Kernel Memory: R/W access to memory allocated to another software element: 	CONFIG_STRICT_KERNEL_RWX	ARCH_OPTIONAL_KERNEL_RWX, ARCH_HAS_STRICT_KERNEL_RWX, !ARCH_OPTIONAL_KERNEL_RWX || ARCH_OPTIONAL_KERNEL_RWX_DEFAULT	Not supported on MIPS platforms	Y	Make kernel text read-only and non-executable; and makes non-text kernel read-only data non-executable				4.11–4.20, 5.0–5.17	Standard security practice, and should be enabled.  Protects against kernel exploitations (e.g., modifying the heap or kernel text).			link
Kernel Memory: R/W access to memory allocated to another software element: 	CONFIG_STRICT_MODULE_RWX	ARCH_OPTIONAL_KERNEL_RWX, ARCH_HAS_STRICT_MODULE_RWX, MODULES, !ARCH_OPTIONAL_KERNEL_RWX || ARCH_OPTIONAL_KERNEL_RWX_DEFAULT	Not supported on MIPS platforms	Y	Make module text and rodata readonly, and makes non-text memory non-executable				4.11–4.20, 5.0–5.17	Standard security practice, and should be enabled.  Protects against kernel exploitations (e.g., modifying text)			link
Kernel Memory: W+X access to memory pages 	CONFIG_DEBUG_WX	MMU, ARM_PTDUMP_CORE	Not supported on all architectures (primarily x86 and arm)	Y	Issue a warning if any pages have W+X access.  W+X access is not expected after applying NX or hardened access permissions.  			Warnings only after issued, it is up to the integrator to check and correct if needed	arm: 4.16-4.20, 5.0-5.17 x86: 4.4-4.20, 5.0-5.17	Since this is executed as a one time check on kernel boot, there is negligible expected performance impact			link
Stack memory:  Enable traceability:	CONFIG_STACKTRACE_SUPPORT	STACKTRACE	Supported in most common architectures	Y	Stack tracing				Version support is architecture dependent, but supported for most architectures on recent kernel versions.  2.6.18-2.6.39, 3.0-3.19, 4.0-4.20, 5.0-5.17	Major performance impact is not expected, but needs to be evaulated in the specific use case. Stack traces are fundamentl to fault handling.			link
Stack memory:  Enable traceability:	CONFIG_STACK_TRACER	CONFIG_HAVE_FUNCTION_TRACER, FUNCTION_TRACER, STACKTRACE, KALLSYMS		Y	Records maximum stack footprint of the kernel and displays in sysfs.			If the kernel is configured with CONFIG_DYNAMIC_FTRACE set to "Y", then there will be no overhead while the stack tracer is disabled on the kernel command line. This allows for selective enabling as needed in the production system.	2.6.28–2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.17	Major performance impact is not expected, but needs to be evaulated in the specific use case.  Trace functions can be individually enabled, and those which are disabled will not affect system performance. Stack traces are fundamentl to fault halting.			https://www.kernel.org/doc/Documentation/trace/ftrace-design.txt
Kernel memory:  Enable traceability:	CONFIG_KPROBES	MODULES, HAVE_KPROBES, KALLSYMS	Enabling this setting requires architecture support for kprobe hooks	N	Disable kernel debugging features.  kprobes supports trap of almost any kernel address and execute a callback function.			Safety mechanisms which rely on KPROBES for kernel debugging will not allow this to be disabled in production systems.	2.6.9–2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.17	Kernel debugging features which allow manipulation of kernel in production systems should not be supported by unprivileged users.			link
Kernel memory:  Enable traceability:	CONFIG_PROC_KCORE	!ARM, PROC_FS, MMU, CRASH_CORE	Not supported by ARM, enabling this setting requires support for procfs and MMU	N	Disable kernel debugging features.  Provides a virtual ELF core file of the live kernel, which can then be read using gdb and other ELF tools.  However, no modifications can be made using this feature.			Safety mechanisms which rely on PROC_KCORE for kernel debugging will not allow this to be disabled in production systems.	2.6.27–2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.17	Kernel debugging features which allow manipulation of kernel in production systems should not be supported by unprivileged users.			link
Kernel memory:  Enable traceability:	CONFIG_ELF_CORE	COREDUMP	Requires architecture support for core dumps and expert kernel features	Y	Support generation of core dumps			Core dumps are fundamental tools for fault handling.	2.6.16–2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.17	Enabling this feature adds about 4K to system footprint.   Focus on safety requirements for core dumps			link
Kernel memory:  Enable traceability:	CONFIG_PROC_PAGE_MONITOR	PROC_FS, MMU	Requires architecture support for procfs, MMU and expert kernel features	Y	Monitor process memory utilizaiton			Monitoring interfaces for process memory utilization are fundamental tools for fault handling.	2.6.25–2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.17	Enabling this feature adds about 4K to system footprint.			link
Kernel memory:  Enable traceability:	CONFIG_FTRACE_SYSCALLS	HAVE_SYSCALL_TRACEPOINTS, GENERIC_TRACER, KALLSYMS	Requires architecture support for hooks to trace syscall entry/exit.	Y	Enable basic tracer to catch syscall entry & exit events			Potential performance impact	2.6.30–2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.17	Most relevant for development analysis, and should be disabled in production system.			link
Kernel memory:  Enable traceability:	CONFIG_KALLSYMS	None	Enabling this setting requires architecture support for expert kernel features.	N	Disable kernel debugging features.  Enabling this feature loads debug symbols				2.5.45-2.5.75, 2.6.20–2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.17	Kernel debugging features which allow manipulation of kernel in production systems should not be supported by unprivileged users. In use cases where KALLSYMS cannot be disabled, /proc/sys/kernel/kptr_restrict can be set to 2 which blocks output of kernel points (kernel points printed using %pK will be replaced with 0's, for privileged as well as unprivileged users). 			https://lwn.net/Articles/420403/
Watchdog, sysctl, debug: kernel mode lockup	CONFIG_SOFTLOCKUP_DETECTOR	DEBUG_KERNEL, !S390, LOCKUP_DETECTOR		Y	Enable kernel to act as a watchdog to detect soft lockups (bugs that cause the kernel to loop in kernel mode for more than 20 seconds, without giving other tasks a chance to run).				4.13–4.20, 5.0–5.17				link
Watchdog, sysctl, debug: kernel mode lockup	CONFIG_DETECT_HUNG_TASK	DEBUG_KERNEL, SOFTLOCKUP_DETECTOR		Y	Enable kernel to detect "hung tasks" (bugs that cause the task to be stuck in uninterruptible state indefinitely).				2.6.30–2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.17				link
Watchdog, sysctl, debug: kernel mode lockup	CONFIG_WQ_WATCHDOG			Y	Enable stall detection on workqueues				4.5–4.20, 5.0–5.17				link
Watchdog, sysctl, debug: kernel mode lockup	CONFIG_KCSAN			Y	Dynamic Analysis			https://www.kernel.org/doc/html/latest/dev-tools/kcsan.html	5.8–5.17				link
Watchdog, sysctl, debug: kernel mode lockup	CONFIG_PROVE_LOCKING			Y	Enable kernel to report locking related deadlocks before they actually occur				2.6.18–2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.17				link
Locking, debug: RT mutexes	CONFIG_DEBUG_RT_MUTEXES			Y	Allows rt mutex semantics violations and rt mutex related deadlocks to be detected and reported automatically				2.6.18–2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.17				link
Locking, debug: RT mutexes	CONFIG_DEBUG_NOTIFIERS			Y	Notification chains are used by Linux kernel to allow different subsystems to subscribe on asynchronous events from other subsystems.  The purpose is to enable independent subsystems to communicate and align, it is used for communication within the kernel only.  The notification chains are a list of callback functions which are executed when an event occurs. This configuration setting provides sanity checks on notifier chains.  It is most useful for kernel developers.				2.6.29–2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.17	Since this is executed as a one time check on kernel boot, there is negligible expected performance impact			link
Locking, debug: RT mutexes	CONFIG_LOCK_STAT			Y	Enable tracking lock contention points, by collecting lock usage statistics				2.6.23–2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.17				link
Locking, debug: RT mutexes	CONFIG_DEBUG_SPINLOCK			Y	Spinlock and rw-lock debugging, basic checks.  Build SMP to catch missing spinlock initialization and certain other kinds of spinlock errors commonly made				2.5.45-2.5.75, 2.6.0–2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.17				link
Locking, debug: RT mutexes	CONFIG_DEBUG_MUTEXES			Y	Mutex debugging, apply basic checks.  Allows mutex semantics violations to be detected and reported.				2.6.16–2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.17				link
Locking, debug: RT mutexes	CONFIG_DEBUG_WW_MUTEX_SLOWPATH			Y	Wait/wound mutex debugging, slowpath testing				3.11–3.19, 4.0–4.20, 5.0–5.17	Significant performance impact.  Should only be used by driver developers.			link
Locking, debug: RT mutexes	CONFIG_DEBUG_LOCK_ALLOC			Y	Lock debugging: detect incorrect freeing of live locks				2.6.18–2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.17				link
Locking, debug: RT mutexes	CONFIG_DEBUG_LOCKING_API_SELFTESTS			Y	Locking API boot-time self-tests				2.6.18–2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.17				link
Locking, debug: RT mutexes	CONFIG_LOCK_TORTURE_TEST			Y	Torture tests for locking			The kernel module may be built after the fact on the running kernel to be tested, if desired.	3.15–3.19, 4.0–4.20, 5.0–5.17				link
Locking, debug: RT mutexes	CONFIG_WW_MUTEX_SELFTEST			Y	Wait/wound mutext selftests			Recommended to enable DEBUG_WW_MUTEX_SLOWPATH in conjunction with this test harness	4.11–4.20, 5.0–5.17				link
Locking, debug: RT mutexes	CONFIG_RCU_TORTURE_TEST			Y	Torture tests for RCU			The kernel module may be built after the fact on the running kernel to be tested, if desired.	2.6.15-2.6.39, 3.0-3.19, 4.0–4.20, 5.0–5.17				link
Locking, debug: RT mutexes	CONFIG_DEBUG_ATOMIC_SLEEP			Y	Check sleep inside atomic section.				3.1–3.19, 4.0–4.20, 5.0–5.17				link
Locking, debug: RT mutexes	CONFIG_SIGNALFD			Y	Allows signals to be received on a file descriptor fixes signal race conditions. pidfd_send_signal() enables signaling a process through a pidfd to eliminate the PID wrap resulting in sending signals to a wrong process.				2.6.22–2.6.39, 3.0–3.19, 4.0–4.20, 5.0–5.17				link
Memory: Branch Target Buffer: Side Channel Attacks	CONFIG_PAGE_TABLE_ISOLATION			Y	CONFIG_PAGE_TABLE_ISOLATION mode enableds _pgd_alloc() alloc 8kb, two page tables at a time, of not configured, 4kb, one page table is alloced at a time.	whether the arch is vulnerable to meltdown alike attacks				Anlaysis for attack interfaces and whether they are vulnerable to meltdown attacks to decide whether to enable this configuration.			link
Memory: Branch Target Buffer: Side Channel Attacks	CONFIG_RETPOLINE			Y	BTB stores some parts of the bits of PC, not the full bits of PC. Using this primitive, an attacker is able to inject an indirect branch target into the BTB, and consequently run some codes in a speculative context. It can leak a sensitive data across some boundaries. (e.g. between VMs, Processes, ...) The attack is called Spectre Variant2. and retpoline has been introducted to stop the attack.					Anlaysis for architectures (AMD is not known to this till now, however this situation might change in future) and whether they are vulnerable to Spectre Variant2 attacks to decide whether to enable this configuration. 			link
Memory: Branch Target Buffer: Side Channel Attacks	UNMAP_KERNEL_AT_EL0		Supported by ARM only	Y	Unmap kernel when running in userspace (aka \"KAISER\")					Consider this when design and use ARM CPU.			link
Memory: Branch Target Buffer: Side Channel Attacks	HARDEN_BRANCH_PREDICTOR			Y	Harden the branch predictor against aliasing attacks					Anlaysis for architectures (AMD is not known to this till now, however this situation might change in future) and whether they are vulnerable to Spectre Variant2 attacks to decide whether to enable this configuration. 			link
Memory: Branch Target Buffer: Side Channel Attacks	HARDEN_EL2_VECTORS			Y	Harden EL2 vector mapping against system register leak					Anlaysis for architectures (AMD is not known to this till now, however this situation might change in future) and whether they are vulnerable to Spectre Variant2 attacks to decide whether to enable this configuration. 			link
Memory: Branch Target Buffer: Side Channel Attacks	ARM64_SSBD		Supported by ARM only	Y	Speculative Store Bypass Disable					Anlaysis for architectures (AMD is not known to this till now, however this situation might change in future) and whether they are vulnerable to Spectre Variant2 attacks to decide whether to enable this configuration. 			link
Memory: Branch Target Buffer: Side Channel Attacks	CONFIG_BPF_UNPRIV_DEFAULT_OFF			N	Disable unprivileged BPF by default					Based on whether the system is locked down, and if there are unprevileged BPF code allowed.			link
Code integrity: Live Patch	LIVEPATCH	DYNAMIC_FTRACE_WITH_REGS || DYNAMIC_FTRACE_WITH_ARGS, MODULES, SYSFS, KALLSYMS_ALL, HAVE_LIVEPATCH, !TRIM_UNUSED_KSYMS		N	Livepatch is a feature that applies kernel patches without any system reboot					For safety concern, N for default, because we don't know if the patch is secure or not, if the patch is from a trusted source, and we need to have full knowlege of  the patch to enabled this. If enabled, we need a syslog for what are introduced by the new patch.			link
